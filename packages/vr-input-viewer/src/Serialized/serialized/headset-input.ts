// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Transform } from '../serialized/transform.js';


export class HeadsetInput {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HeadsetInput {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHeadsetInput(bb:flatbuffers.ByteBuffer, obj?:HeadsetInput):HeadsetInput {
  return (obj || new HeadsetInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHeadsetInput(bb:flatbuffers.ByteBuffer, obj?:HeadsetInput):HeadsetInput {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HeadsetInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

transform(obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Transform()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startHeadsetInput(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTransform(builder:flatbuffers.Builder, transformOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, transformOffset, 0);
}

static endHeadsetInput(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHeadsetInput(builder:flatbuffers.Builder, transformOffset:flatbuffers.Offset):flatbuffers.Offset {
  HeadsetInput.startHeadsetInput(builder);
  HeadsetInput.addTransform(builder, transformOffset);
  return HeadsetInput.endHeadsetInput(builder);
}
}
