// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Transform } from '../serialized/transform.js';


export class ControllerInput {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ControllerInput {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsControllerInput(bb:flatbuffers.ByteBuffer, obj?:ControllerInput):ControllerInput {
  return (obj || new ControllerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsControllerInput(bb:flatbuffers.ByteBuffer, obj?:ControllerInput):ControllerInput {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ControllerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

transform(obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Transform()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Bit 0 = pressed
 * Bit 1 = touched
 * Bits 2-15 = value
 */
buttons(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

buttonsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

buttonsArray():Uint16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

axes(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

axesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

axesArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startControllerInput(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTransform(builder:flatbuffers.Builder, transformOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, transformOffset, 0);
}

static addButtons(builder:flatbuffers.Builder, buttonsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, buttonsOffset, 0);
}

static createButtonsVector(builder:flatbuffers.Builder, data:number[]|Uint16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createButtonsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createButtonsVector(builder:flatbuffers.Builder, data:number[]|Uint16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startButtonsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static addAxes(builder:flatbuffers.Builder, axesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, axesOffset, 0);
}

static createAxesVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createAxesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createAxesVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startAxesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endControllerInput(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createControllerInput(builder:flatbuffers.Builder, transformOffset:flatbuffers.Offset, buttonsOffset:flatbuffers.Offset, axesOffset:flatbuffers.Offset):flatbuffers.Offset {
  ControllerInput.startControllerInput(builder);
  ControllerInput.addTransform(builder, transformOffset);
  ControllerInput.addButtons(builder, buttonsOffset);
  ControllerInput.addAxes(builder, axesOffset);
  return ControllerInput.endControllerInput(builder);
}
}
