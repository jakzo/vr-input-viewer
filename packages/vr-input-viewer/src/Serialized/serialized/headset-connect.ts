// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class HeadsetConnect {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HeadsetConnect {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHeadsetConnect(bb:flatbuffers.ByteBuffer, obj?:HeadsetConnect):HeadsetConnect {
  return (obj || new HeadsetConnect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHeadsetConnect(bb:flatbuffers.ByteBuffer, obj?:HeadsetConnect):HeadsetConnect {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HeadsetConnect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

profiles(index: number):string
profiles(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
profiles(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

profilesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startHeadsetConnect(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addProfiles(builder:flatbuffers.Builder, profilesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, profilesOffset, 0);
}

static createProfilesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProfilesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endHeadsetConnect(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHeadsetConnect(builder:flatbuffers.Builder, profilesOffset:flatbuffers.Offset):flatbuffers.Offset {
  HeadsetConnect.startHeadsetConnect(builder);
  HeadsetConnect.addProfiles(builder, profilesOffset);
  return HeadsetConnect.endHeadsetConnect(builder);
}
}
