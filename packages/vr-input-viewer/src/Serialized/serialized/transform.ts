// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vector3 } from '../serialized/vector3.js';
import { Vector4 } from '../serialized/vector4.js';


export class Transform {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Transform {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

position(obj?:Vector3):Vector3|null {
  return (obj || new Vector3()).__init(this.bb_pos, this.bb!);
}

rotationQuaternion(obj?:Vector4):Vector4|null {
  return (obj || new Vector4()).__init(this.bb_pos + 12, this.bb!);
}

static sizeOf():number {
  return 28;
}

static createTransform(builder:flatbuffers.Builder, position_x: number, position_y: number, position_z: number, rotation_quaternion_x: number, rotation_quaternion_y: number, rotation_quaternion_z: number, rotation_quaternion_w: number):flatbuffers.Offset {
  builder.prep(4, 28);
  builder.prep(4, 16);
  builder.writeFloat32(rotation_quaternion_w);
  builder.writeFloat32(rotation_quaternion_z);
  builder.writeFloat32(rotation_quaternion_y);
  builder.writeFloat32(rotation_quaternion_x);
  builder.prep(4, 12);
  builder.writeFloat32(position_z);
  builder.writeFloat32(position_y);
  builder.writeFloat32(position_x);
  return builder.offset();
}

}
